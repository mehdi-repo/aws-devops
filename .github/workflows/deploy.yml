name: Deploy FastAPI to AWS ECS

on:
  push:
    branches:
      - main  # Run the workflow when code is pushed to the main branch

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: 605134428871.dkr.ecr.eu-central-1.amazonaws.com/fastapi-app
  ECS_CLUSTER: fastapi-cluster
  ECS_SERVICE: fastapi-service
  ECS_TASK_FAMILY: fastapi-app

jobs:
  build-and-push:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

      - name: Build and Tag Docker Image
        run: |
          docker build -t fastapi-app .
          docker tag fastapi-app:latest ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker tag fastapi-app:latest ${{ env.ECR_REPOSITORY }}:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.ECR_REPOSITORY }}:latest

  update-ecs:
    name: Update ECS Task Definition & Deploy
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Current Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_FAMILY }} --query taskDefinition > task-definition.json

      - name: Update Task Definition with New Image
        run: |
          IMAGE_URI="${{ env.ECR_REPOSITORY }}:latest"
          sed -i "s|\"image\": \".*\"|\"image\": \"$IMAGE_URI\"|" task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json > new-task-def.json

      - name: Extract New Task Definition ARN
        run: |
          TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' new-task-def.json)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS Service to Use New Task Definition
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition $TASK_DEF_ARN

      - name: Force New Deployment
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
